"""
utils.py

Alex Nicholson (45316207)
11/10/2022

Contains extra utility functions to help with this like results visualisation and saved model loading

"""


import matplotlib.pyplot as plt
import numpy as np


def show_subplot(model, test_data, num_to_show):
    """
    Shows a series of tiled plots with side-by-side examples of the original data and reconstructed data

        Parameters:
            original (ndarray): An example of an original image from the training dataset
            original (ndarray): An example of an original image from the training dataset
            reconstructed (ndarray): A new synthetic image generated by the VQ-VAE model
    """

    # Visualise output generations from the finished model
    idx = np.random.choice(len(test_data), num_to_show)

    test_images = test_data[idx]
    reconstructions_test = model.predict(test_images)

    for i in range(reconstructions_test.shape[0]):
        original = test_images[i, :, :, 0]
        reconstructed = reconstructions_test[i, :, :, 0]

        plt.subplot(1, 2, 1)
        plt.imshow(original.squeeze() + 0.5, cmap='gray')
        plt.title("Original")
        plt.axis("off")

        plt.subplot(1, 2, 2)
        plt.imshow(reconstructed.squeeze() + 0.5, cmap='gray')
        plt.title("Reconstructed")
        plt.axis("off")

        plt.savefig('out/original_vs_reconstructed_{:04d}.png'.format(i))
        plt.close()


def show_subplot(original, reconstructed, index):
    """
    Shows a series of tiled plots with side-by-side examples of the original data and reconstructed data

        Parameters:
            original (ndarray): An example of an original image from the training dataset
            reconstructed (ndarray): A new synthetic image generated by the VQ-VAE model
    """

    plt.subplot(1, 2, 1)
    plt.imshow(original.squeeze() + 0.5, cmap='gray')
    plt.title("Original")
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.imshow(reconstructed.squeeze() + 0.5, cmap='gray')
    plt.title("Reconstructed")
    plt.axis("off")

    plt.savefig('out/original_vs_reconstructed_{:04d}.png'.format(index))
    plt.close()



